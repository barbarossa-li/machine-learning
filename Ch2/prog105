from sklearn.ensemble import GradientBoostingClassifier
from sklearn.datasets import make_blobs, make_circles
X, y= make_circles(noise=.25, factor=.5, random_state=1)

y_named=np.array(["blue", "red"])[y]

X_train, X_test, y_train_named, y_test_named, y_train, y_test = \
    train_test_split(X, y_named, y, random_state=0)
    
gbrt=GradientBoostingClassifier(random_state=0)
gbrt.fit(X_train, y_train_named)

print("X_test.shape: {}".format(X_test.shape))
print("Decision function shape: {}".format(
gbrt.decision_function(X_test).shape))

print("Decision function:\n{}".format(gbrt.decision_function(X_test)[:6]))

print("Thresholded decision function:\n{}".format(
    gbrt.decision_function(X_test)>0))
print("Prediction:\n{}".format(gbrt.predict(X_test)))

greater_zero = (gbrt.decision_function(X_test)>0).astype(int)
pred = gbrt.classes_[greater_zero]
print("pred is equal to predictions: {}".format(
    np.all(pred==gbrt.predict(X_test))))
    
decision_function =gbrt.decision_function(X_test)
print("Decision function minimum:{:.2f} maximum:{:.2f}".format(
  np.min(decision_function),np.max(decision_function)))
