from sklearn.linear_model import Ridge
ridge =Ridge().fit(X_train,y_train)
print("Training set score: {:.2f}".format(ridge.score(X_train,y_train)))
print("Test set score: {:.2f}".format(ridge.score(X_test,y_test)))

ridge10=Ridge(alpha=10).fit(X_train,y_train)
print("Training set score: {:.2f}".format(ridge10.score(X_train,y_train)))
print("Test set score: {:.2f}".format(ridge10.score(X_test,y_test)))

ridge01=Ridge(alpha=0.1).fit(X_train,y_train)
print("Training set score: {:.2f}".format(ridge01.score(X_train,y_train)))
print("Test set score: {:.2f}".format(ridge01.score(X_test,y_test)))

plt.plot(ridge.coef_, 's', label="Ridge alpha=1")
plt.plot(ridge10.coef_,'^',label="Ridge alpha=10")
plt.plot(ridge01.coef_,'v', label="Ridge alpha=0.1")

plt.plot(lr.coef_,'o',label ="LinearRegression")
plt.xlabel("coefficient index")
plt.ylabel("Coefficient magnitude")
plt.hlines(0,0,len(lr.coef_))
plt.ylim(-25,25)
plt.legend()

import mglearn
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import load_boston
from sklearn.datasets import load_breast_cancer

X,y=mglearn.datasets.load_extended_boston()
X_train, X_test,y_train, y_test=train_test_split(X,y,random_state=0)
for i in np.linspace(.1,10,100):
    ridge=Ridge(alpha=i).fit(X_train, y_train)
    print("alpha= "+str(i))
    print("Training siet score:{: .2f}".format(ridge.score(X_train,y_train)))
    print("Test set score:{: .2f}\n".format(ridge.score(X_test,y_test)))
